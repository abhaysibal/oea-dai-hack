{
	"name": "AAD_Processor_WithSISReplacement",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 4,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "4",
				"spark.dynamicAllocation.maxExecutors": "4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7b9a4896-4541-483f-bdc7-d8f4ec6be3ee/resourceGroups/rg-oea-daihackathon/providers/Microsoft.Synapse/workspaces/syn-oea-daihackathon/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-daihackathon.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run /OEA_py"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /example_modules_py"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /AAD_Processor"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import monotonically_increasing_id, row_number\r\n",
					"from pyspark.sql.functions import col\r\n",
					"from pyspark.sql.window import Window\r\n",
					"\r\n",
					"class RecombinantDataReplacer(BaseOEAModule):\r\n",
					"    def __init__(self, oea, m365, aad, source_folder='m365'):\r\n",
					"        BaseOEAModule.__init__(self, oea, source_folder)\r\n",
					"        self.stage1np_devices = self.stage1np + '/m365/AAD/devices'\r\n",
					"        self.stage1np_users = self.stage1np + '/AAD/users'\r\n",
					"        self.stage1np_roster = self.stage1np + '/test_data/DIPData/Roster/'\r\n",
					"\r\n",
					"    def replace_identifier_in_aad_devices_table(self):\r\n",
					"        personidentifier_path = self.stage1np_roster + '/PersonIdentifier.csv'\r\n",
					"        spark_schema = self.oea.to_spark_schema(m365.schemas['PersonIdentifier'])\r\n",
					"        personidentifier_df = spark.read.csv(personidentifier_path, header='false', schema=spark_schema)\r\n",
					"\r\n",
					"        person_path = self.stage1np_roster + '/Person.csv'\r\n",
					"        spark_schema = self.oea.to_spark_schema(m365.schemas['PersonIdentifier'])\r\n",
					"        person_df = spark.read.csv(personidentifier_path, header='false', schema=spark_schema)\r\n",
					"\r\n",
					"        aadusers_path = self.stage1np_users + \"/users.csv\"\r\n",
					"        spark_schema = self.oea.to_spark_schema(aad.schemas['AAD_Users'])\r\n",
					"        df = spark.read.csv(aadusers_path, header='true')\r\n",
					"\r\n",
					"        #print(df.select(\"Identifier\").show())\r\n",
					"        df = df.limit(min(personidentifier_df.count(), df.count()))\r\n",
					"\r\n",
					"        df=df.withColumn('row_index', row_number().over(Window.orderBy(monotonically_increasing_id())))\r\n",
					"        personidentifier_df=personidentifier_df.withColumn('row_index', row_number().over(Window.orderBy(monotonically_increasing_id())))\r\n",
					"        person_df=personidentifier_df.withColumn('row_index', row_number().over(Window.orderBy(monotonically_increasing_id())))\r\n",
					"\r\n",
					"        df = df.join(personidentifier_df, on=[\"row_index\"]).drop(\"row_index\")\r\n",
					"        users_df = df.select(\r\n",
					"            col(\"givenName\").alias(\"givenName\"),\r\n",
					"            col(\"surname\").alias(\"surname\"),\r\n",
					"            col(\"Identifier\").alias(\"userPrincipalName\"),\r\n",
					"            col(\"PersonId\").alias(\"id\"))\r\n",
					"        print(df.show())\r\n",
					"        print(personidentifier_df.show())\r\n",
					"        print(person_df.show())\r\n",
					"\r\n",
					"    def replace_identifier_in_aad_users_table(self):\r\n",
					"        pass\r\n",
					""
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"oea = OEA()\r\n",
					"m365 = M365(oea)\r\n",
					"aad = IntuneAADPackage(oea)\r\n",
					"replacer = RecombinantDataReplacer(oea, m365, aad)\r\n",
					"replacer.replace_identifier_in_aad_devices_table()"
				],
				"execution_count": 50
			}
		]
	}
}