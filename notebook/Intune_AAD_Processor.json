{
	"name": "Intune_AAD_Processor",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run /OEA_py"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /example_modules_py"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class IntuneAADPackage(BaseOEAModule):\r\n",
					"    # Defines the intune data processing module.\r\n",
					"    def __init__(self, oea, source_folder='m365'):\r\n",
					"\r\n",
					"        BaseOEAModule.__init__(self, oea, source_folder)\r\n",
					"        \r\n",
					"        self.stage1np_intune = self.stage1np + '/intune/devices'\r\n",
					"        self.stage1np_aad = self.stage1np + '/AAD/users'\r\n",
					"\r\n",
					"        self.schemas['Intune_Devices'] =   [['DeviceName', 'string', 'no-op'],\r\n",
					"                                    ['ManagedBy', 'string', 'no-op'],\r\n",
					"                                    ['Ownership', 'string', 'no-op'],\r\n",
					"                                    ['Compliance','string','no-op'],\r\n",
					"                                    ['OS', 'string', 'no-op'],\r\n",
					"                                    ['OSVersion', 'string', 'no-op'],\r\n",
					"                                    ['LastCheckIn', 'timestamp', 'no-op'],\r\n",
					"                                    ['PrimaryUserUPN', 'string', 'hash'],\r\n",
					"                                    ['DeviceID', 'string', 'hash']]\r\n",
					"        self.schemas['AAD_Devices'] =   [['DeviceName', 'string', 'no-op'],\r\n",
					"                                    ['ManagedBy', 'string', 'no-op'],\r\n",
					"                                    ['Ownership', 'string', 'no-op'],\r\n",
					"                                    ['OS', 'string', 'no-op'],\r\n",
					"                                    ['OSVersion', 'string', 'no-op'],\r\n",
					"                                    ['LastCheckIn', 'timestamp', 'no-op'],\r\n",
					"                                    ['PrimaryUserUPN', 'string', 'hash'],\r\n",
					"                                    ['DeviceID', 'string', 'hash']]\r\n",
					"\r\n",
					"    def process_devices_data_from_stage1(self):\r\n",
					"        logger.info(\"Processing intune reports data from: \" + self.stage1np)\r\n",
					"        spark_schema = self.oea.to_spark_schema(self.schemas['Devices'])\r\n",
					"        df = spark.read.csv(self.stage1np_devices + '/*.csv', header='true', schema=spark_schema)\r\n",
					"        df = df.dropDuplicates(['DeviceID'])\r\n",
					"        df.write.parquet(self.stage2np + '/Intunes/Devices/devices.parquet', mode='overwrite')\r\n",
					"\r\n",
					"    def process_devices_data_from_stage2(self):\r\n",
					"        spark_schema = self.oea.to_spark_schema(self.schemas['Devices'])\r\n",
					"        df = spark.read.parquet(self.stage2np + '/Intunes/Devices/*.parquet', header='true', schema=spark_schema)\r\n",
					"        #sqlContext.registerDataFrameAsTable(spark.read.format('parquet').load(oea.stage2np + '/m365/Intunes/*'), 'Devices')\r\n",
					"        #df = spark.sql(\"select DeviceID,PrimaryUserUPN,LastCheckIn,OSVersion,OS,Ownership,ManagedBy,DeviceName from Devices\")\r\n",
					"        df.write.format('parquet').mode('overwrite').save(self.stage2np + '/m365/Intunes/Devices')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}